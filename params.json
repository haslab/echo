{"name":"Echo","tagline":"Model repair and transformation","body":"# Echo\r\n\r\n*Echo* is a tool for model repair and transformation based on the [Alloy](http://alloy.mit.edu) model finder, with support for bidirectional model transformations.\r\nIt is able to both check and recover, through minimal updates, both intra- and inter-model consistency, and is built over the Eclipse Modeling Framework (EMF).\r\n\r\n## Features\r\n\r\nEcho is meta-model independent, being able to process any meta-model specified in ECore and its respective instances in XMI. Additional constraints, as well as operations, are specified by embedding OCL in annotations, as prescribed by EMF. Inter-model consistency is specified by the [QVT Relations](http://www.omg.org/spec/QVT/1.1/) (QVT-R) transformation language.\r\n\r\nOver these constraints and models, Echo possesses the following features.\r\n\r\n<dl>\r\n  <dt>Model visualization</dt>\r\n  <dd>Models are presented using the Alloy visualizer. For better readability, an Alloy theme is automatically inferred from the meta-model, although an user-defined theme can also be provided if desired.</dd>\r\n\r\n  <dt>Model generation</dt>\r\n  <dd>Given a meta-model and user-specified size, Echo can generate a new model conformant with the metamodel. Additional constraints can also be specified to generate instances with a parametrized shape.</dd>\r\n\r\n  <dt>Consistency check</dt>\r\n  <dd>Given a model, Echo can check if it conforms to the respective meta-model.</dd>\r\n\r\n  <dt>Model repair</dt>\r\n  <dd>Given a model that does not conform to its meta-model, Echo can find a minimal repair that produces a consistent model.</dd>\r\n\r\n  <dt>Inter-model consistency check</dt>\r\n  <dd>Given a QVT-R transformation and two models that are supposed to be consistent via it, Echo can check if such is the case. The checking semantics follows exactly the specified in the QVT standard.</dd>\r\n\r\n  <dt>Inter-model consistency repair</dt>\r\n  <dd>QVT-R specifications are interpreted as bidirectional transformations, thus, given inconsistent models, Echo is able to repair either one to recover consistency.</dd>\r\n\r\n  <dt>Inter-model generation</dt>\r\n  <dd>Given a QVT-R transformation and an existing model, Echo can generate the minimal model consistent with existing model by the QVT-R transformation.</dd>\r\n</dl>\r\n\r\nFor all generation and repair procedures, Echo presents *all* valid solutions, allowing the user to select the desired one.\r\n\r\nRepair procedures are always *minimal*, in the sense that the resulting consistent model is as close as possible to the original inconsistent one. The user is able to choose how to measure this distance: either through *graph edit distance*, a meta-model independent metric that sees models as graphs and counts modifications of edges and nodes, or through an *operation-based distance*, that counts the number of applications of user-defined operations required to obtain the new model.\r\n\r\nFor more information about how the tool is implemented please consult the paper [Implementing QVT-R Bidirectional Model Transformations Using Alloy](http://www3.di.uminho.pt/~mac/Publications/fase13.pdf), accepted for publication at [FASE'13](http://www.etaps.org/2013/fase13). For an overview of Echo's features please watch this [video](https://vimeo.com/67716977).\r\n\r\n\r\n## Installing\r\n\r\nEcho is deployed over the Eclipse Modeling Tools 4.3 (Kepler) (including the QVTd component, which, being in incubation phase, is not included in the standard package). The following steps assume a fresh instalation of Eclipse. If Eclipse Modeling Tools 4.3 is already installed, step 3 will suffice.\r\n\r\n1. Download the [Eclipse Modeling Tools 4.3 (Kepler)](http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/keplerrc2);\r\n2. Install the  QVT Declarative (QVTd) 0.10.0RC2 component in Eclipse (Help > Install New Software...) by downloading by downloading the [archive](http://www.eclipse.org/mmt/downloads/?showAll=1&hlbuild=S201305311516&project=qvtd#S201305311516) or through the [update site](http://download.eclipse.org/mmt/qvtd/updates/milestones);\r\n3. Install the  Echo 0.2.0 plugin in Eclipse (Help > Install New Software...) by downloading the [archive](http://haslab.github.io/echo/downloads/echo-0.2.0.zip) or through the [update site](http://haslab.github.io/echo/updates/).\r\n\r\n<!---\r\n### Command-line\r\n\r\n* Checkout the latest stable version (v0.1) from the git repository:\r\n\r\n```\r\ngit clone https://github.com/haslab/echo.git\r\ncd echo\r\ngit checkout v0.1\r\n```\r\n* Compile the java source files into an executable jar by running `make.sh`:\r\n\r\n```\r\n./make.sh\r\n```\r\nThis will create the `echo.jar` file in the project's root directory.\r\n-->\r\n## Running\r\n\r\nThe best way to get started with Echo is to watch this [video](https://vimeo.com/67716977).\r\n\r\n<!---\r\n### Command-line\r\n\r\nAt the moment, Echo is available through an executable jar. The basic syntax is\r\n```sh\r\njava -jar echo.jar -check -q <qvtr> -m <models>... -i <instances>...\r\njava -jar echo.jar -enforce <direction> -q <qvtr> -m <models>... -i <instances>...\r\n```\r\nfor checkonly and enforce mode respectively. Metamodels should be presented in ECore, while instances should be xmi files conforming to the respective metamodels and presented in the order defined by the QVT-R transformation.\r\n\r\nAdditional options include:\r\n```\r\n-d, --delta <nat>           maximum delta between the original and the new generated instances\r\n-o, --nooverwrite           do not overwrite the original instance xmi with the newly generated\r\n-t, --conformance           test if instances conform to the models before applying qvt\r\n```\r\n\r\nEcho can also simply be run to check if the instances conform to the models as:\r\n```sh\r\njava -jar -t -m <models>... -i <instances>...\r\n```\r\n-->\r\n## Examples\r\n\r\nFolder [examples](examples) contains QVT-R implementations of some typical bidirectional transformations. \r\n\r\n<!--Files `enforce` and `check` are example commands that perform consistency checks and enforcement executions, respectively.-->\r\n\r\n## Contributors\r\n* [Alcino Cunha] (http://di.uminho.pt/~mac)\r\n* Tiago Guimar√£es \r\n* [Nuno Macedo] (http://di.uminho.pt/~nfmmacedo)\r\n\r\nThe contributors are members of the *High-Assurance Software Laboratory* ([HASLab](haslab.di.uminho.pt)) at University of Minho, and have developed this work under the [FATBiT](fatbit.di.uminho.pt) project.\r\n","google":"UA-34834021-2","note":"Don't delete this file! It's used internally to help with page regeneration."}