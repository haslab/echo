transformation uml2rdbms (uml : UML, rdbms : RDBMS) {

 	top relation P2S { 
		pn: String; 
		domain uml pt:Package { 
			name=pn };
    	domain rdbms st:Scheme { 
      		name=pn };
  	}

 	top relation C2T { 
    	cn: String; 
    	domain uml c:Class { 
      		persistent=true, 
      		namespace=p:Package{}, name=cn };
    	domain rdbms t:Table { 
      		scheme=s:Scheme{}, name=cn };
    	when { P2S(p,s); }
    	where { A2C(c,t); }
  	}

  	relation A2C {
    	an : String; a:UML::Attribute; g:UML::Class;
    	domain uml c:Class {} {g.attributes->includes(a) and a.name = an and (c->closure(super)->includes(g) or g = c) };
    	domain rdbms t:Table { columns = cl:Column {name = an} } {t.scheme.keys->forAll(k | k.column <> cl) };
  	}

	top relation A2K {
		kn : String;
		domain uml a:Association { 
			source=sc:Class{persistent=true},
			target=tc:Class{persistent=true},
      		namespace=p:Package{}, name=kn };
    	domain rdbms k:FKey { 
    		column=sco:Column{name=kn, table=st:Table{}},
    		refersTo=pk:PKey{column=tco:Column{table=tt:Table{}}},
      		scheme=s:Scheme{}};
    	when { P2S(p,s) and C2T(sc,st) and C2T(tc,tt); }
	}

}